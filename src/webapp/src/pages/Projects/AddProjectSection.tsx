import { BlockTitle } from '@/components/@common/BlockTitle'
import { AddProjectBtn } from './AddProjectBtn'
import bot_icon from "@/assets/bot-icon.svg"
import channel_icon from "@/assets/channel-icon.svg"
import group_icon from "@/assets/group-icon.svg"
import { openTelegramLink, useLaunchParams, openLink } from '@telegram-apps/sdk-react'
import { useState } from 'react'
import { Modal } from '@/components/Modal/Modal'
import { ModalMessage } from '@/components/@common/ModalMessage'
import { useNavigate } from 'react-router'
import { MainContainerButton } from '@/components/@common/MainContainerButton'

export const AddProjectSection = () => {
	const [isOpen, setIsOpen] = useState(false)
	const [modalType, setModalType] = useState<'startchannel' | 'startgroup' | null>(null) // –•—Ä–∞–Ω–∏–º —Ç–∏–ø

	const launchParams = useLaunchParams()
	const navigate = useNavigate()

	const botUsername = 'qwexs_ibot'
	const adminRights = 'invite_users+post_messages+delete_messages'

	const handleOpenLink = (type: 'startgroup' | 'startchannel') => {
		const tgLink = `tg://resolve?domain=${botUsername}&${type}&admin=${adminRights}`
		const webLink = `https://t.me/${botUsername}?${type}` // Fallback –¥–ª—è –≤–µ–±–∞

		if (launchParams?.platform) {
			if (launchParams.platform === 'macos') {
				setModalType(type)
				setIsOpen(true)
			} else {
				try {
					openTelegramLink(tgLink)
				} catch (err) {
					console.error('–û—à–∏–±–∫–∞ Mini App:', err)
					window.open(webLink, '_blank')
				}
			}
		} else {
			window.open(webLink, '_blank')
		}
	}

	const { title, message } = getModalContent(modalType)

	return (
		<MainContainerButton>
			<BlockTitle title="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç">
				–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª, –≥—Ä—É–ø–ø—É –∏–ª–∏ –±–æ—Ç–∞.
			</BlockTitle>
			<div className="flex justify-center w-full gap-2">
				<AddProjectBtn
					icon={channel_icon}
					onClick={() => handleOpenLink('startchannel')}
				>
					–ö–∞–Ω–∞–ª
				</AddProjectBtn>
				<AddProjectBtn
					icon={group_icon}
					onClick={() => handleOpenLink('startgroup')}
				>
					–ì—Ä—É–ø–ø–∞
				</AddProjectBtn>
				<AddProjectBtn
					icon={bot_icon}
					onClick={() => navigate('/projects/add/bot')}
				>
					–ë–æ—Ç
				</AddProjectBtn>
			</div>
			<Modal isOpen={isOpen} onOpenChange={setIsOpen}>
				<ModalMessage title={title} onClick={() => setIsOpen(false)}>
					<div className="flex w-full flex-col gap-2 text-start">{message}</div>
				</ModalMessage>
			</Modal>
		</MainContainerButton>
	)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
const getModalContent = (modalType: 'startchannel' | 'startgroup' | null) => {

	const handleClick = (link: string) => {
		openLink(link)
	}

	if (modalType === 'startchannel') {
		return {
			title: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
			message: (
				<>
					<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–Ω–æ–ø–∫–∞ ¬´üì¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS.</p>
					<p>
						–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª –∫ —Å–µ—Ä–≤–∏—Å—É, –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ @tgraphyx_bot –≤—Ä—É—á–Ω—É—é –ø–æ{' '}
						<a
							className="text-tg-link cursor-pointer"
							onClick={() => handleClick("https://telegra.ph/Podklyuchenie-k-TeleGraphyx-12-02")}
						>
							–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
						</a>.
					</p>
				</>
			),
		}
	} else if (modalType === 'startgroup') {
		return {
			title: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã',
			message: (
				<>
					<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–Ω–æ–ø–∫–∞ ¬´üì¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS.</p>
					<p>
						–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É –∫ —Å–µ—Ä–≤–∏—Å—É, –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ @tgraphyx_bot –≤—Ä—É—á–Ω—É—é –ø–æ{' '}
						<a
							className="text-tg-link cursor-pointer"
							onClick={() => handleClick("https://telegra.ph/Podklyuchenie-k-TeleGraphyx-12-02")}
						>
							–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
						</a>.
					</p>
				</>
			),
		}
	}
	return { title: '', message: null } // –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
}